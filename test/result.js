// Generated by CoffeeScript 1.6.3
(function() {
  var FooResult, Result, assert, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('chai').assert;

  Result = require('../lib/result');

  FooResult = (function(_super) {
    __extends(FooResult, _super);

    function FooResult() {
      _ref = FooResult.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FooResult.prototype.valueNames = ['foo', 'bar', 'baz'];

    return FooResult;

  })(Result);

  suite('Result', function() {
    setup(function() {
      return this.result = new FooResult();
    });
    suite('creates values object according to valueNames', function() {
      test('get value names', function() {
        assert.deepEqual(this.result.getValueNames(), this.result.valueNames);
        return assert.notEqual(this.result.getValueNames(), this.result.valueNames);
      });
      return test('all values are initialized to zero', function() {
        var name, _i, _len, _ref1;
        _ref1 = this.result.getValueNames();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          name = _ref1[_i];
          assert.equal(this.result.getValue(name), 0);
        }
        return false;
      });
    });
    suite('set value', function() {
      test('valid name', function() {
        this.result.setValue('foo', 3);
        return assert.ok(this.result.getValue('foo', 3));
      });
      return test('invalid name', function() {
        var _this = this;
        return assert.throws(function() {
          return _this.result.setValue('xxx', 3);
        });
      });
    });
    suite('get value', function() {
      test('valid name', function() {
        return assert.equal(this.result.getValue('foo'), 0);
      });
      return test('invalid name', function() {
        var _this = this;
        return assert.throws(function() {
          return _this.result.getValue('xyz');
        });
      });
    });
    test('get values', function() {
      var values;
      values = this.result.getValues();
      assert.deepEqual(values, this.result.values);
      return assert.notEqual(values, this.result.values);
    });
    test('set values', function() {
      this.result.setValues({
        foo: 1,
        bar: 2
      });
      return assert.deepEqual(this.result.getValues(), {
        foo: 1,
        bar: 2,
        baz: 0
      });
    });
    test('constructor values', function() {
      var result;
      result = new FooResult({
        foo: 1,
        bar: 2
      });
      return assert.deepEqual(result.getValues(), {
        foo: 1,
        bar: 2,
        baz: 0
      });
    });
    test('other Result as a constructor argument', function() {
      var result1, result2;
      result1 = new FooResult({
        foo: 1
      });
      result2 = new FooResult(result1);
      return assert.deepEqual(result2.getValues(), {
        foo: 1,
        bar: 0,
        baz: 0
      });
    });
    test('map values', function() {
      var ret;
      ret = this.result.mapValues(function(name, val) {
        if (name === 'foo') {
          return val + 1;
        } else {
          return val + 2;
        }
      });
      assert.deepEqual(this.result.getValues(), {
        foo: 1,
        bar: 2,
        baz: 2
      });
      return assert.deepEqual(ret.constructor.name, 'FooResult');
    });
    return suite('static arithmetic operations', function() {
      test('add', function() {
        var res;
        res = FooResult.add({
          foo: 1,
          bar: 2
        }, {
          bar: 3,
          baz: 4
        });
        return assert.deepEqual(res.getValues(), {
          foo: 1,
          bar: 5,
          baz: 4
        });
      });
      test('substract', function() {
        var res;
        res = FooResult.substract({
          foo: 3
        }, {
          foo: 1
        });
        return assert.deepEqual(res.getValues(), {
          foo: 2,
          bar: 0,
          baz: 0
        });
      });
      test('divide by', function() {
        var res;
        res = FooResult.divideBy({
          foo: 3
        }, 2);
        return assert.deepEqual(res.getValues(), {
          foo: 1.5,
          bar: 0,
          baz: 0
        });
      });
      suite('power', function() {
        test('zero', function() {
          var res;
          res = FooResult.pow({
            foo: 5
          }, 0);
          return assert.equal(res.getValue('foo'), 1);
        });
        return test('power 2', function() {
          var res;
          res = FooResult.pow({
            foo: 5
          }, 2);
          return assert.equal(res.getValue('foo'), 25);
        });
      });
      return test('sqrt', function() {
        var res;
        res = FooResult.sqrt({
          foo: 4
        });
        return assert.deepEqual(res.getValues(), {
          foo: 2,
          bar: 0,
          baz: 0
        });
      });
    });
  });

}).call(this);
