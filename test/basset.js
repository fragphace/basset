// Generated by CoffeeScript 1.6.3
(function() {
  var Basset, HarResult, Sniffer, assert, sandbox, sinon;

  assert = require('chai').assert;

  sinon = require('sinon');

  sandbox = require('sandboxed-module');

  Sniffer = require('../lib/sniffer');

  Basset = require('../lib/basset');

  HarResult = require('../lib/harResult');

  suite('Basset', function() {
    setup(function() {
      return this.basset = new Basset('http://example.com', {
        repeatNum: 3
      });
    });
    suite('first argument (url)', function() {
      test('test is required', function() {
        var _this = this;
        return assert["throw"](function() {
          return new Basset();
        });
      });
      return test('test is a string', function() {
        var _this = this;
        return assert["throw"](function() {
          return new Basset({});
        });
      });
    });
    suite('options', function() {
      test('default options', function() {
        return assert.equal(Basset.defaultOptions.repeatNum, 1);
      });
      return test('constructor options', function() {
        var basset;
        basset = new Basset('http://example.com', {
          repeatNum: 5
        });
        return assert.equal(basset.options.repeatNum, 5);
      });
    });
    test('get sniffers', function() {
      return assert.equal(this.basset.getSniffers().length, 3);
    });
    return suite('sniff', function() {
      setup(function() {
        var index, sniffer, _i, _len, _ref, _results,
          _this = this;
        _ref = this.basset.getSniffers();
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          sniffer = _ref[index];
          _results.push((function(sniffer, index) {
            sniffer.runCallback = sinon.spy();
            return sinon.stub(sniffer, 'run', function(callback) {
              if (callback == null) {
                callback = function() {};
              }
              return setTimeout(function() {
                sniffer.runCallback();
                if (index === 0) {
                  return callback(null, new HarResult({
                    onLoad: 4
                  }));
                } else if (index === 1) {
                  return callback(null, new HarResult({
                    onLoad: 8
                  }));
                } else {
                  return callback(new Error('Something gone wrong'));
                }
              }, 10);
            });
          })(sniffer, index));
        }
        return _results;
      });
      suite('run', function() {
        test('all sniffers were called', function(done) {
          var _this = this;
          this.basset.on('end', function() {
            var sniffer, _i, _len, _ref;
            _ref = _this.basset.getSniffers();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              sniffer = _ref[_i];
              assert.ok(sniffer.run.called);
            }
            return done();
          });
          return this.basset.sniff();
        });
        test('all sniffers were called with callback', function(done) {
          var _this = this;
          this.basset.on('end', function() {
            var sniffer, _i, _len, _ref;
            _ref = _this.basset.getSniffers();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              sniffer = _ref[_i];
              assert.equal(typeof sniffer.run.getCall(0).args[0], 'function');
            }
            return done();
          });
          return this.basset.sniff();
        });
        return test('call order', function(done) {
          var _this = this;
          this.basset.on('end', function() {
            var lastSniffer, sniffer, _i, _len, _ref;
            lastSniffer = null;
            _ref = _this.basset.getSniffers();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              sniffer = _ref[_i];
              if (lastSniffer) {
                assert.ok(sniffer.run.calledAfter(lastSniffer.run));
              }
              lastSniffer = sniffer;
            }
            return done();
          });
          return this.basset.sniff();
        });
      });
      suite('run callback', function() {
        test('callbacks were called', function(done) {
          var _this = this;
          this.basset.on('end', function() {
            var sniffer, _i, _len, _ref;
            _ref = _this.basset.getSniffers();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              sniffer = _ref[_i];
              assert.ok(sniffer.runCallback.called);
            }
            return done();
          });
          return this.basset.sniff();
        });
        return test('were called in series', function(done) {
          var _this = this;
          this.basset.on('end', function() {
            var sniffers;
            sniffers = _this.basset.getSniffers();
            assert.ok(sniffers[1].run.calledAfter(sniffers[0].runCallback));
            return done();
          });
          return this.basset.sniff();
        });
      });
      return suite('events', function() {
        setup(function() {
          return this.spy = sinon.spy();
        });
        test('begin', function(done) {
          var _this = this;
          this.basset.on('begin', this.spy);
          this.basset.on('end', function() {
            assert.ok(_this.spy.calledOnce);
            return done();
          });
          return this.basset.sniff();
        });
        test('start', function(done) {
          var _this = this;
          this.basset.on('testStart', this.spy);
          this.basset.on('end', function() {
            assert.ok(_this.spy.calledThrice);
            return done();
          });
          return this.basset.sniff();
        });
        test('stop', function(done) {
          var _this = this;
          this.basset.on('testStop', this.spy);
          this.basset.on('end', function() {
            assert.ok(_this.spy.calledThrice);
            return done();
          });
          return this.basset.sniff();
        });
        suite('failure', function() {
          setup(function(done) {
            var _this = this;
            this.basset.on('failure', this.spy);
            this.basset.on('end', function(err) {
              return done();
            });
            return this.basset.sniff();
          });
          test('called once', function() {
            return assert(this.spy.calledOnce);
          });
          return test('called with error', function() {
            var err;
            err = this.spy.getCall(0).args[0];
            return assert.instanceOf(err, Error);
          });
        });
        suite('result', function() {
          setup(function(done) {
            var _this = this;
            this.basset.on('result', this.spy);
            this.basset.on('end', function() {
              return done();
            });
            return this.basset.sniff();
          });
          test('called twice', function() {
            return assert(this.spy.calledTwice);
          });
          return test('called with result', function() {
            var res;
            res = this.spy.getCall(0).args[0];
            assert.equal(res.constructor.name, 'HarResult');
            return assert.equal(res.getValue('onLoad'), 4);
          });
        });
        return suite('end', function() {
          setup(function(done) {
            var _this = this;
            this.basset.on('end', function(stat) {
              _this.stat = stat;
              return done();
            });
            return this.basset.sniff();
          });
          test('type', function() {
            return assert.equal(this.stat.constructor.name, 'Statistic');
          });
          return test('result', function() {
            return assert.equal(this.stat.average().getValue('onLoad'), 6);
          });
        });
      });
    });
  });

}).call(this);
